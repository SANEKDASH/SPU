    call input

    call discriminant

    push 0
    push rdx

    jae salve

    push rax
    push 0

    je linear

    push 0
    out

    hlt         ;the end



input:
    in
    pop rax

    in
    pop rbx

    in
    pop rcx

    ret



b_zero:
    push 0
    push rcx
        je inf_roots
    push 0
    out

    hlt

    ret



inf_roots:
    push 3
    out

    hlt

    ret



discriminant:
    push rbx
    push rbx
    mult

    push 4
    push rax
    mult
    push rcx
    mult

    sub

    pop rdx

    ret



first_root:
    push -1
    push rbx
    mult
    push rdx
    sqrt

    sub

    push 2
    push rax
    mult
    div

    pop [1]

    ret



second_root:
    push -1
    push rbx
    mult
    push rdx
    sqrt

    add

    push 2
    push rax
    mult

    div

    pop [2]

    ret



linear:
    push 0
    push rbx

    je b_zero

    push -1
    push rcx
    mult

    push rbx

    div

    push 1
    out
    out

    hlt

    ret



salve:
    push 0
    push rax

    je linear

    call first_root
    call second_root

    push [1]
    push [2]

    jne two_roots

    push 1
    out

    out

    hlt

    ret



two_roots:
    push 2
    out
    out
    out

    hlt

    ret





